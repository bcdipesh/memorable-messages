// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Status {
  PENDING
  DELIVERED
  FAILED
}

model User {
  id           Int        @id @default(autoincrement())
  username     String     @unique @db.VarChar(64)
  email        String     @unique @db.VarChar(120)
  passwordHash String     @db.VarChar(256)
  createdAt    DateTime   @db.Timestamptz(6) @default(now())
  occasions    Occasion[]
}

model Occasion {
  id                Int               @id @default(autoincrement())
  userId            Int
  deliveryMethod    String            @db.VarChar(64)
  occasionType      String            @db.VarChar(256)
  messageContent    String
  isRepeated        Boolean           @default(false)
  dateTime          DateTime          @db.Timestamptz(6)
  createdAt         DateTime          @db.Timestamptz(6)
  receiverEmail     String?           @db.VarChar(120)
  receiverPhone     String?           @db.VarChar(15)
  deliveryHistories DeliveryHistory[]
  users             User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model DeliveryHistory {
  id         Int      @id @default(autoincrement())
  occasionId Int
  status     Status
  timestamp  DateTime @db.Timestamptz(6)
  occasions  Occasion @relation(fields: [occasionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
